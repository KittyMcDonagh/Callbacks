{"filter":false,"title":"save-callbacks_4.js","tooltip":"/save-callbacks_4.js","undoManager":{"mark":9,"position":9,"stack":[[{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"remove","lines":["5"],"id":1},{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"insert","lines":["4"]}],[{"start":{"row":0,"column":3},"end":{"row":1,"column":23},"action":"remove","lines":["Example 4 - In this example I'm adding callbacks to ensure one function only starts after","// another is completed"],"id":2},{"start":{"row":0,"column":3},"end":{"row":0,"column":83},"action":"insert","lines":["Example 4 – JS is ‘Event Driven’ - Add a callback process the Functions in order"]}],[{"start":{"row":0,"column":53},"end":{"row":0,"column":54},"action":"insert","lines":["t"],"id":3},{"start":{"row":0,"column":54},"end":{"row":0,"column":55},"action":"insert","lines":["o"]}],[{"start":{"row":0,"column":55},"end":{"row":0,"column":56},"action":"insert","lines":[" "],"id":4}],[{"start":{"row":13,"column":3},"end":{"row":17,"column":80},"action":"remove","lines":["Create a function that takes in a new post","// Give it a callback function called 'callback' (this can be any name) and","// call that callback function after creating the new post","// This ensures that 'getPosts' is called after 'createPost' has finished,","// which can't be guaranteed if one function is called first, and then the other"],"id":5},{"start":{"row":13,"column":3},"end":{"row":14,"column":0},"action":"insert","lines":["// Function 1 - Create a new post. Include a callback function",""]}],[{"start":{"row":13,"column":5},"end":{"row":13,"column":6},"action":"remove","lines":[" "],"id":6},{"start":{"row":13,"column":4},"end":{"row":13,"column":5},"action":"remove","lines":["/"]},{"start":{"row":13,"column":3},"end":{"row":13,"column":4},"action":"remove","lines":["/"]},{"start":{"row":13,"column":2},"end":{"row":13,"column":3},"action":"remove","lines":[" "]}],[{"start":{"row":13,"column":2},"end":{"row":13,"column":3},"action":"insert","lines":[" "],"id":7}],[{"start":{"row":14,"column":0},"end":{"row":15,"column":0},"action":"remove","lines":["",""],"id":8}],[{"start":{"row":27,"column":0},"end":{"row":28,"column":0},"action":"insert","lines":["// Function 2 -Display all posts – this is the callback function",""],"id":9}],[{"start":{"row":0,"column":0},"end":{"row":63,"column":0},"action":"remove","lines":["// Example 4 – JS is ‘Event Driven’ - Add a callback to process the Functions in order","","// 'createPost' is set to respond after 2 seconds, while 'getPosts' is set to respond after","// 1 second. ","","","const posts = [","    { title: \"Post One\", body: \"This is Post One\" },","    { title: \"Post Two\", body: \"This is Post Two\" }","","];","","","// Function 1 - Create a new post. Include a callback function","","function createPost(post, callback) {","    ","    // Set timeout again - mimicing post to server","    ","    setTimeout(function() {","        let output = '';","        posts.push(post);","        callback();","        ","    }, 2000)","}","","// Function 2 -Display all posts – this is the callback function","","function getPosts() {","    ","    // We're mimicing getting posts from a server and that","    // could take a few minutes, so we set a timeout","    // setTimeout takes in a callback function, and it ","    // takes in a time delay before whatever is in the ","    // cb function happens. 1000 = 1000 milliseconds or","    // 1 second","    ","    setTimeout(function() {","        let output = '';","        posts.forEach(function(post, index) {","            output += `<li>${post.title}</li>`;","        });","        document.body.innerHTML = output;","        ","    }, 1000)","}","","","","","// Create a post","// Add 'getPosts' as the callback function to 'createPost', instead of calling","// 'getPosts' separately","","createPost({ title: \"Post Three\", body: \"This is Post Three\" }, getPosts);","","","","","","","",""],"id":10},{"start":{"row":0,"column":0},"end":{"row":39,"column":0},"action":"insert","lines":["// Example 4 – JS is ‘Event Driven’ - Add a callback to process the Functions in order","","const posts = [","    { title: \"Post One\", body: \"Existing Post\" },","    { title: \"Post Two\", body: \"Existing Post\" }","","];","","","// Function 1 - Create a new post. Pass in a callback function","","function createPost(post, callback) {","         setTimeout(function() {","            let output = '';","            posts.push(post);","            callback();","         }, 2000);","        ","}","","","// Function 2 -Display all posts","","function getPosts() {","   ","        setTimeout(function() {","            let output = '';","            posts.forEach(function(post) {","                output += `<p><strong>${post.title}</strong> = ${post.body}</p>`;","            });","            document.body.innerHTML = output;","        }, 1000);","}","","","// Call Function 1 to Create a post","","createPost({ title: \"Post Three\", body: \"Newly Created Post\" }, getPosts);","",""]}]]},"ace":{"folds":[],"scrolltop":317,"scrollleft":0,"selection":{"start":{"row":39,"column":0},"end":{"row":39,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":23,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1581688221172,"hash":"6daf6717b156561f3b2933f7879695853c95d28d"}